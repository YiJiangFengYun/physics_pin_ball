{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/vector.ts","webpack:///./src/object.ts","webpack:///./src/rectangle.ts","webpack:///./src/bounds.ts","webpack:///./src/circle.ts","webpack:///./src/triangle.ts","webpack:///./src/my_circle.ts","webpack:///./src/index.ts","webpack:///./src/world.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector","x","y","this","subVectors","vec1","vec2","result","addVectors","mulVectorMag","vec","magnitude","normalVector","copy","clone","normal","dotVectors","reflectVector","Error","dot","mulMag","target","sub","add","Math","sqrt","manitudeSquare","zero","vector_1","bounds_1","Obj","_pos","_bounds","Bounds","updatePos","object_1","Rectangle","_super","_this","_width","_height","points","_points","POINT_COUNT","length","_setBounds","_setPoints","__extends","pos","bounds","halfWidth","halfHeight","minX","minY","maxX","maxY","intersectBounds","bounds1","bounds2","intersect","Circle","_radius","radius","rectangle_1","DirectIRTriangle","IRTriangle","_size","halfSize","circle_1","triangle_1","MyCircle","_velocity","collide","collided","targetCircle","myCircle","targetSquare","circleCenterX","circleCenter","circleCenterY","circleRadius","squareBounds","velocity","pointCount","pointHelper","circleRadiusSquare","targetTriangle","circleCenterPos","triangleBounds","triangleBoundsMin","triangleBoundsMax","circlArea","findArea","areaX","areaY","sameXDirect","direct","sameYDirect","point","abs","vectorTriangleToCenter","__export","my_circle_1","World","time","objectCount","objects","myObj","addObj","removeObj","clear","step","dt","iterations","cachePosHelper","nextPosHelper","collisionResultHelper","collisionNormlHelper","reflectResultHelper","minDt","iteration","myBody","cachePos","nextPos","collisioned","collisionResult","collsionNormal","reflectResult","cacheMagnitude","nextPos_1"],"mappings":"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","file":"model.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","export class Vector {\r\n    public static subVectors(vec1:Vector, vec2:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec1.x - vec2.x;\r\n        result.y = vec1.y - vec2.y;\r\n        return result;\r\n    }\r\n\r\n    public static addVectors(vec1:Vector, vec2:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec1.x + vec2.x;\r\n        result.y = vec1.y + vec2.y;\r\n        return result;\r\n    }\r\n\r\n    public static mulVectorMag(vec:Vector, magnitude:number, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec.x * magnitude;\r\n        result.y = vec.y * magnitude;\r\n        return result;\r\n    }\r\n\r\n    public static normalVector(vec:Vector, result?:Vector):Vector {\r\n        if (! result) result = vec.clone();\r\n        else result.copy(vec);\r\n        result.normal();\r\n        return result;\r\n    }\r\n\r\n    public static dotVectors(vec1:Vector, vec2:Vector):number {\r\n        return vec1.x * vec2.x + vec1.y * vec2.y;\r\n    }\r\n\r\n    public static reflectVector(vec:Vector, normal:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        else if (result == vec) {\r\n            throw new Error(\"The result shouldn't be argument vec.\");\r\n        }\r\n        let dot = Vector.dotVectors(vec, normal);\r\n        result.copy(normal);\r\n        result.mulMag(dot * 2);\r\n        Vector.subVectors(vec, result, result);\r\n        return result;\r\n    }\r\n\r\n    x:number;\r\n    y:number;\r\n    constructor(x:number = 0, y:number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    clone():Vector {\r\n        return new Vector(this.x, this.y);\r\n    }\r\n\r\n    copy(target:Vector):void {\r\n        this.x = target.x;\r\n        this.y = target.y;\r\n    }\r\n\r\n    sub(target:Vector):void {\r\n        this.x -= target.x;\r\n        this.y -= target.y;\r\n    }\r\n\r\n    add(target:Vector):void {\r\n        this.x += target.x;\r\n        this.y += target.y;\r\n    }\r\n\r\n    mulMag(magnitude:number):void {\r\n        this.x *= magnitude;\r\n        this.y *= magnitude;\r\n    }\r\n\r\n    magnitude():number {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n\r\n    manitudeSquare():number {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        return x * x + y * y;\r\n    }\r\n\r\n    normal():void {\r\n        let magnitude = this.magnitude();\r\n        this.x /= magnitude;\r\n        this.y /= magnitude;\r\n    }\r\n\r\n    zero():void {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}","import { Vector } from \"./vector\";\r\nimport { Bounds } from \"./bounds\";\r\n\r\nexport abstract class Obj {\r\n    protected _pos:Vector;\r\n    protected _bounds:Bounds;\r\n    constructor() {\r\n        this._pos = new Vector();\r\n        this._bounds = new Bounds();\r\n    }\r\n\r\n    get pos():Vector {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        this._pos.copy(value);\r\n    }\r\n\r\n    get bounds():Bounds {\r\n        return this._bounds;\r\n    }\r\n\r\n    updatePos(value?:Vector) {\r\n        if (value) {\r\n            this._pos = value;\r\n        }\r\n    }\r\n}","import { Obj } from \"./object\";\r\nimport { Vector } from \"./vector\";\r\n\r\nexport class Rectangle extends Obj {\r\n    private _width:number;\r\n    private _height:number;\r\n    static POINT_COUNT:number = 4;\r\n    private _points:Vector[];\r\n    constructor() {\r\n        super();\r\n        this._width = 0;\r\n        this._height = 0;\r\n        let points:Vector[] = [];\r\n        this._points = points;\r\n        const POINT_COUNT = Rectangle.POINT_COUNT;\r\n        points.length = POINT_COUNT;\r\n        for (let i = 0; i < POINT_COUNT; ++i) {\r\n            points[i] = new Vector();\r\n        }\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value:number) {\r\n        this._width = value;\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value:number) {\r\n        this._height = value;\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get pos() {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        var pos = this._pos;\r\n        pos.copy(value);\r\n        \r\n        this._setBounds();\r\n        this._setPoints();\r\n        \r\n    }\r\n\r\n    updatePos(value?:Vector) {\r\n        super.updatePos(value);\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get points() {\r\n        return this._points;\r\n    }\r\n\r\n    _setBounds() {\r\n        let pos = this._pos;\r\n        let bounds = this._bounds;\r\n        let halfWidth = this._width / 2;\r\n        let halfHeight = this._height / 2;\r\n        bounds.minX = pos.x - halfWidth;\r\n        bounds.minY = pos.y - halfHeight;\r\n        bounds.maxX = pos.x + halfWidth;\r\n        bounds.maxY = pos.y + halfHeight;\r\n    }\r\n\r\n    _setPoints() {\r\n        let bounds = this._bounds;\r\n        let points = this._points;\r\n        //0 is 0(y)0(x)\r\n        points[0].x = bounds.minX;\r\n        points[0].y = bounds.minY;\r\n        //1 is 0(y)1(x)\r\n        points[1].x = bounds.maxX;\r\n        points[1].y = bounds.minY;\r\n        //3 is 1(y)1(x)\r\n        points[3].x = bounds.maxX;\r\n        points[3].y = bounds.maxY;\r\n        //2 is 1(y)0(x)\r\n        points[2].x = bounds.minX;\r\n        points[2].y = bounds.maxY;\r\n    }\r\n}","export class Bounds {\r\n    public static intersectBounds(bounds1:Bounds, bounds2:Bounds):boolean {\r\n        if (bounds1.minX > bounds2.maxX || bounds1.maxX < bounds2.minX || \r\n            bounds1.minY > bounds2.maxY || bounds1.maxY < bounds2.minY) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    minX:number;\r\n    minY:number;\r\n    maxX:number;\r\n    maxY:number;\r\n    constructor(minX:number = 0, minY:number = 0, maxX:number = 0, maxY:number = 0) {\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    }\r\n\r\n    intersect(target:Bounds):boolean {\r\n        return Bounds.intersectBounds(this, target);\r\n    }\r\n}","import { Obj } from \"./object\";\r\nimport { Bounds } from \"./bounds\";\r\nimport { Vector } from \"./vector\";\r\n\r\nexport class Circle extends Obj {\r\n    private _radius:number;\r\n    constructor() {\r\n        super();\r\n        this._radius = 0;\r\n        this._setBounds();\r\n    }\r\n\r\n    get radius():number {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius(value:number) {\r\n        this._radius = value;\r\n        this._setBounds();\r\n    }\r\n\r\n    get pos() {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        var pos = this._pos;\r\n        pos.copy(value);\r\n        this._setBounds();\r\n    }\r\n\r\n    updatePos(value?:Vector) {\r\n        super.updatePos(value);\r\n        this._setBounds();\r\n    }\r\n\r\n    _setBounds() {\r\n        let pos = this._pos;\r\n        var bounds = this._bounds;\r\n        var radius = this._radius;\r\n        bounds.minX = pos.x - radius;\r\n        bounds.minY = pos.y - radius;\r\n        bounds.maxX = pos.x + radius;\r\n        bounds.maxY = pos.y + radius;\r\n    }\r\n}","import { Obj } from \"./object\";\r\nimport { Vector } from \"./vector\";\r\nimport { Rectangle } from \"./rectangle\";\r\n\r\n//Right angle direct.\r\nexport enum DirectIRTriangle {\r\n    LEFT_UP = 0,\r\n    RIGHT_UP = 1,\r\n    RIGHT_BOTTOM = 3,\r\n    LEFT_BOTTOM = 2,\r\n}\r\n\r\nexport class IRTriangle extends Obj {\r\n    public direct:DirectIRTriangle;\r\n    private _size:number;\r\n    static POINT_COUNT:number = 4;\r\n    private _points:Vector[];\r\n    constructor() {\r\n        super();\r\n        this._size = 0;\r\n        let points:Vector[] = [];\r\n        this._points = points;\r\n        const POINT_COUNT = Rectangle.POINT_COUNT;\r\n        points.length = POINT_COUNT;\r\n        for (let i = 0; i < POINT_COUNT; ++i) {\r\n            points[i] = new Vector();\r\n        }\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get size() {\r\n        return this._size;\r\n    }\r\n\r\n    set size(value:number) {\r\n        this._size = value;\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get pos() {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        var pos = this._pos;\r\n        pos.copy(value);\r\n        \r\n        this._setBounds();\r\n        this._setPoints();\r\n        \r\n    }\r\n\r\n    updatePos(value?:Vector) {\r\n        super.updatePos(value);\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get points() {\r\n        return this._points;\r\n    }\r\n\r\n    _setBounds() {\r\n        let pos = this._pos;\r\n        let bounds = this._bounds;\r\n        let halfSize = this._size / 2;\r\n        bounds.minX = pos.x - halfSize;\r\n        bounds.minY = pos.y - halfSize;\r\n        bounds.maxX = pos.x + halfSize;\r\n        bounds.maxY = pos.y + halfSize;\r\n    }\r\n\r\n    _setPoints() {\r\n        let bounds = this._bounds;\r\n        let points = this._points;\r\n        //0 is 0(y)0(x)\r\n        points[0].x = bounds.minX;\r\n        points[0].y = bounds.minY;\r\n        //1 is 0(y)1(x)\r\n        points[1].x = bounds.maxX;\r\n        points[1].y = bounds.minY;\r\n        //3 is 1(y)1(x)\r\n        points[3].x = bounds.maxX;\r\n        points[3].y = bounds.maxY;\r\n        //2 is 1(y)0(x)\r\n        points[2].x = bounds.minX;\r\n        points[2].y = bounds.maxY;\r\n    }\r\n}","import { Circle } from \"./circle\";\r\nimport { Obj } from \"./object\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Vector } from \"./vector\";\r\nimport { IRTriangle } from \"./triangle\";\r\n\r\nexport interface ICollideResult {\r\n    collided: boolean; normal:Vector;\r\n}\r\n\r\nexport class MyCircle extends Circle {\r\n\r\n    private _velocity:Vector;\r\n\r\n    constructor() {\r\n        super();\r\n        this._velocity = new Vector();\r\n\r\n    }\r\n\r\n    get velocity():Vector {\r\n        return this._velocity;\r\n    }\r\n\r\n    set velocity(value:Vector) {\r\n        this._velocity = value;\r\n    }\r\n\r\n    collide(target:Obj, result?:ICollideResult) {\r\n        if (result == null) result = {\r\n                collided: false,\r\n                normal: new Vector(),\r\n            };\r\n        else {\r\n            result.collided = false;\r\n        }\r\n        if (target instanceof Circle) {\r\n            let myCircle = this;\r\n            let targetCircle = target as Circle;\r\n            if (myCircle.bounds.intersect(targetCircle.bounds)) {\r\n                let normal = Vector.subVectors(myCircle.pos, targetCircle.pos);\r\n                let distance = normal.magnitude();\r\n                if (distance < (myCircle.radius + targetCircle.radius)) {\r\n                    result.collided = true;\r\n                    normal.normal();\r\n                    result.normal.copy(normal);\r\n                }\r\n            }\r\n        } else if (target instanceof Rectangle) {\r\n            let myCircle = this;\r\n            let targetSquare = target as Rectangle;\r\n            if (myCircle.bounds.intersect(targetSquare.bounds)) {\r\n                let circleCenter = myCircle.pos;\r\n                let circleCenterX = circleCenter.x;\r\n                let circleCenterY = circleCenter.y;\r\n                let circleRadius = myCircle.radius;\r\n                let squareBounds = targetSquare.bounds;\r\n                if (circleCenterX > squareBounds.minX && circleCenterX < squareBounds.maxX) {\r\n                    if (circleCenterY > squareBounds.minY && circleCenterY < squareBounds.maxY) {\r\n                        //The center is inside the bounds (namely, inside the square).\r\n                        result.collided = true;\r\n                        Vector.normalVector(myCircle.velocity, result.normal);\r\n                    } else if (circleCenterY > squareBounds.maxY) {\r\n                        //The center is downside the bounds.\r\n                        if (circleCenterY - squareBounds.maxY < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(0, 1);\r\n                        }\r\n\r\n                    } else if (circleCenterY < squareBounds.minY) {\r\n                        //The center is upside the bounds.\r\n                        if (squareBounds.minY - circleCenterY < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(0, -1);\r\n                        }\r\n                    }\r\n                } else if (circleCenterY > squareBounds.minY && circleCenterY < squareBounds.maxY) {\r\n                    if (circleCenterX > squareBounds.maxX) {\r\n                        //The center is right of the bounds.\r\n                        if (circleCenterX - squareBounds.maxX < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(1, 0);\r\n                        }\r\n                    } else if (circleCenterX < squareBounds.minX) {\r\n                        //The center is left of the bounds.\r\n                        if (squareBounds.minX - circleCenterX < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(-1, 0);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //Detect if any point of square is inside the circle.\r\n                    let points = targetSquare.points;\r\n                    let pointCount = points.length;\r\n                    let pointHelper:Vector = new Vector();\r\n                    let circleRadiusSquare:number = circleRadius * circleRadius;\r\n                    for (let i = 0; i < pointCount; ++i) {\r\n                        Vector.subVectors(circleCenter, points[i], pointHelper);\r\n                        if (pointHelper.manitudeSquare() < circleRadiusSquare) {\r\n                            //The point is inside the circle.\r\n                            result.collided = true;\r\n                            Vector.normalVector(pointHelper, result.normal);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (target instanceof IRTriangle) {\r\n            let myCircle = this;\r\n            let targetTriangle = target as IRTriangle;\r\n            if (myCircle.bounds.intersect(targetTriangle.bounds)) {\r\n                let circleCenter = myCircle.pos;\r\n                let circleCenterPos = [circleCenter.x, circleCenter.y];\r\n                let circleRadius = myCircle.radius;\r\n                let triangleBounds = targetTriangle.bounds;\r\n                let triangleBoundsMin = [triangleBounds.minX, triangleBounds.minY];\r\n                let triangleBoundsMax = [triangleBounds.maxX, triangleBounds.maxY];\r\n                //00 is left 01 is midle 10 is right\r\n                //First two bit is x and second two bit is y.\r\n                let circlArea = 0;\r\n                if (circleCenterPos[0] > triangleBoundsMin[0] && circleCenterPos[0] < triangleBoundsMax[0]) {\r\n                    circlArea |= 1;\r\n                } else if (circleCenterPos[0] > triangleBoundsMax[0]) {\r\n                    circlArea |= 2;\r\n                }\r\n                if (circleCenterPos[1] > triangleBoundsMin[1] && circleCenterPos[1] < triangleBoundsMax[1]) {\r\n                    circlArea |= (1 << 2);\r\n                } else if (circleCenterPos[1] > triangleBoundsMax[1]) {\r\n                    circlArea |= (2 << 2);\r\n                }\r\n                //rectangle 9 area.\r\n                let findArea = false;\r\n                for (let areaX = 0; areaX < 3; ++areaX) {\r\n                    for (let areaY = 0; areaY < 3; ++areaY) {\r\n                        if ((circlArea ^ areaX) == 0 && ((circlArea >> 2) ^ areaY) == 0) {\r\n                            findArea = true;\r\n                            let sameXDirect = areaX != 1 && (areaX >> 1) == (targetTriangle.direct & 1);\r\n                            let sameYDirect = areaY != 1 && (areaY >> 1) == ((targetTriangle.direct >> 1) & 1);\r\n                            if (sameXDirect && sameYDirect) {\r\n                                if (areaX != 1 && areaY != 1) {\r\n                                    //The circle is corner of the square.\r\n                                    //Detect if any point of square is inside the circle.\r\n                                    let points = targetTriangle.points;\r\n                                    let point = points[((areaY >> 1) << 1) | (areaX >> 1)];\r\n                                    let pointHelper = new Vector();\r\n                                    let circleRadiusSquare:number = circleRadius * circleRadius;\r\n                                    Vector.subVectors(circleCenter, point, pointHelper);\r\n                                    if (pointHelper.manitudeSquare() < circleRadiusSquare) {\r\n                                        //The point is inside the circle.\r\n                                        result.collided = true;\r\n                                        Vector.normalVector(pointHelper, result.normal);\r\n                                    }  \r\n                                } else {\r\n                                    let points = targetTriangle.points;\r\n                                    //Right angle point.\r\n                                    let point = points[targetTriangle.direct];\r\n                                    if (areaX != 1) {\r\n                                        if (Math.abs(point.x - circleCenterPos[0]) < circleRadius) {\r\n                                            result.collided = true;\r\n                                            result.normal = new Vector(areaX - 1, 0);\r\n                                        }\r\n                                    } else {\r\n                                        if (Math.abs(point.y - circleCenterPos[1]) < circleRadius) {\r\n                                            result.collided = true;\r\n                                            result.normal = new Vector(0, areaY);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                let vectorTriangleToCenter = Vector.subVectors(myCircle.pos, targetTriangle.pos);\r\n                                let points = targetTriangle.points;\r\n                                    //Right angle point.\r\n                                let point = points[targetTriangle.direct];\r\n                                let normal = Vector.subVectors(targetTriangle.pos, point);\r\n                                normal.normal();\r\n                                let dot = Vector.dotVectors(vectorTriangleToCenter, normal);\r\n                                let circleRadius = myCircle.radius;\r\n                                if (dot < circleRadius) {\r\n                                    result.collided = true;\r\n                                    result.normal = normal;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (findArea) break;\r\n                }\r\n            }\r\n            \r\n\r\n        } else {\r\n            throw new Error(\"Invalid shape for collision detection.\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","export * from \"./vector\";\r\nexport * from \"./bounds\";\r\nexport * from \"./object\";\r\nexport * from \"./circle\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./triangle\";\r\nexport * from \"./world\";\r\nexport * from \"./my_circle\";\r\n","import { Obj } from \"./object\";\r\nimport { Vector } from \"./vector\";\r\nimport { MyCircle, ICollideResult } from \"./my_circle\";\r\n\r\nexport class World {\r\n\r\n    time:number;\r\n    objectCount:number;\r\n    objects: Obj[];\r\n    myObj:MyCircle;\r\n\r\n    constructor() {\r\n        this.time = 0;\r\n        this.objectCount = 0;\r\n        this.objects = [];\r\n        this.myObj = new MyCircle();\r\n    }\r\n\r\n    addObj(object:Obj) {\r\n        if (this.objectCount < this.objects.length) {\r\n            this.objects[this.objectCount++] = object;\r\n        }\r\n        else {\r\n            this.objects.length = 2 * this.objects.length;\r\n            this.objects[this.objectCount++] = object;\r\n        }\r\n    }\r\n\r\n    removeObj(object:Obj) {\r\n        let objectCount = this.objectCount;\r\n        let objects = this.objects;\r\n        for (let i = 0; i < objectCount; ++i) {\r\n            if (object == objects[i]) {\r\n                --objectCount;\r\n                if (i < objectCount) {\r\n                    objects[i] = objects[objectCount];\r\n                    objects[objectCount] = null;\r\n                }\r\n\r\n                this.objectCount = objectCount;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.objectCount = 0;\r\n    }\r\n\r\n    get myObject() {\r\n        return this.myObj;\r\n    }\r\n\r\n    step(dt: number, iterations: number):void {\r\n\r\n        dt = dt || 0;\r\n        iterations = iterations || 1;\r\n\r\n        let cachePosHelper:Vector = new Vector();\r\n        let nextPosHelper:Vector = new Vector();\r\n        let collisionResultHelper:ICollideResult = { collided:false, normal: new Vector()};\r\n        let collisionNormlHelper:Vector = new Vector();\r\n        let reflectResultHelper:Vector = new Vector();\r\n\r\n        let minDt:number = dt / iterations;\r\n        for (let iteration = 0; iteration < iterations; ++iteration) {\r\n            let objectCount = this.objectCount;\r\n            let objects = this.objects;\r\n            let myBody = this.myObj;\r\n\r\n            //Cache current position.\r\n            let cachePos = cachePosHelper;\r\n            cachePos.copy(myBody.pos);\r\n\r\n            //Caculate next position.\r\n            let nextPos = nextPosHelper;\r\n            nextPos.x = myBody.pos.x + myBody.velocity.x * minDt;\r\n            nextPos.y = myBody.pos.y + myBody.velocity.y * minDt;\r\n            myBody.pos = nextPos;\r\n\r\n            //Detect collision.\r\n            let collisioned = false;\r\n            let collisionResult = collisionResultHelper;\r\n            let collsionNormal = collisionNormlHelper;\r\n            collsionNormal.zero();\r\n            for (let i = 0; i < objectCount; ++i) {\r\n                let object = objects[i];\r\n                myBody.collide(object, collisionResult);\r\n                if (collisionResult.collided) {\r\n                    collisioned = true;\r\n                    collsionNormal.add(collisionResult.normal);\r\n                }\r\n            }\r\n\r\n            //Final collsion result.\r\n            let reflectResult = reflectResultHelper;\r\n            if (collisioned) {\r\n                //Recover to cached pre postion.\r\n                myBody.pos = cachePos;\r\n                let cacheMagnitude = myBody.velocity.magnitude();\r\n                //Set new velocity according to collision normal.\r\n                Vector.reflectVector(myBody.velocity, collsionNormal, reflectResult);\r\n                // if (Math.abs(reflectResult.magnitude() - myBody.velocity.magnitude()) > 10) \r\n                //     throw new Error('Velocity is changed!');\r\n                // myBody.velocity.copy(reflectResult);\r\n\r\n                reflectResult.normal();\r\n                reflectResult.mulMag(cacheMagnitude);\r\n                myBody.velocity.copy(reflectResult);\r\n\r\n                //Move\r\n                let nextPos = nextPosHelper;\r\n                nextPos.x = myBody.pos.x + myBody.velocity.x * minDt;\r\n                nextPos.y = myBody.pos.y + myBody.velocity.y * minDt;\r\n                myBody.pos = nextPos;\r\n            }\r\n        }\r\n\r\n        this.time += dt;\r\n    }\r\n}"],"sourceRoot":""}