{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/vector.ts","webpack:///./src/bounds.ts","webpack:///./src/object.ts","webpack:///./src/circle.ts","webpack:///./src/square.ts","webpack:///./src/my_circle.ts","webpack:///./src/index.ts","webpack:///./src/world.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector","x","y","this","subVectors","vec1","vec2","result","addVectors","mulVectorMag","vec","magnitude","normalVector","copy","clone","normal","dotVectors","reflectVector","Error","dot","mulMag","target","sub","add","Math","sqrt","manitudeSquare","zero","Bounds","minX","minY","maxX","maxY","intersectBounds","bounds1","bounds2","intersect","vector_1","bounds_1","Obj","_pos","_bounds","object_1","Circle","_super","_this","_radius","__extends","pos","bounds","radius","Square","_size","points","_points","POINT_COUNT","length","halfSize","size","circle_1","square_1","MyCircle","_velocity","collide","collided","targetCircle","myCircle","targetSquare","circleCenter","circleCenterX","circleCenterY","circleRadius","squareBounds","velocity","pointCount","pointHelper","circleRadiusSquare","__export","my_circle_1","World","time","objectCount","objects","myObj","addObj","removeObj","clear","step","dt","iterations","cachePosHelper","nextPosHelper","collisionResultHelper","collisionNormlHelper","reflectResultHelper","minDt","iteration","myBody","cachePos","nextPos","collisioned","collisionResult","collsionNormal","reflectResult","nextPos_1"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,mFClFA,IAAAC,EAAA,WA+CI,SAAAA,EAAYC,EAAcC,QAAd,IAAAD,MAAA,QAAc,IAAAC,MAAA,GACtBC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EAiDjB,OAjGkBF,EAAAI,WAAd,SAAyBC,EAAaC,EAAaC,GAI/C,OAHMA,IAAQA,EAAS,IAAIP,GAC3BO,EAAON,EAAII,EAAKJ,EAAIK,EAAKL,EACzBM,EAAOL,EAAIG,EAAKH,EAAII,EAAKJ,EAClBK,GAGGP,EAAAQ,WAAd,SAAyBH,EAAaC,EAAaC,GAI/C,OAHMA,IAAQA,EAAS,IAAIP,GAC3BO,EAAON,EAAII,EAAKJ,EAAIK,EAAKL,EACzBM,EAAOL,EAAIG,EAAKH,EAAII,EAAKJ,EAClBK,GAGGP,EAAAS,aAAd,SAA2BC,EAAYC,EAAkBJ,GAIrD,OAHMA,IAAQA,EAAS,IAAIP,GAC3BO,EAAON,EAAIS,EAAIT,EAAIU,EACnBJ,EAAOL,EAAIQ,EAAIR,EAAIS,EACZJ,GAGGP,EAAAY,aAAd,SAA2BF,EAAYH,GAInC,OAHMA,EACDA,EAAOM,KAAKH,GADHH,EAASG,EAAII,QAE3BP,EAAOQ,SACAR,GAGGP,EAAAgB,WAAd,SAAyBX,EAAaC,GAClC,OAAOD,EAAKJ,EAAIK,EAAKL,EAAII,EAAKH,EAAII,EAAKJ,GAG7BF,EAAAiB,cAAd,SAA4BP,EAAYK,EAAeR,GACnD,GAAMA,GACD,GAAIA,GAAUG,EACf,MAAM,IAAIQ,MAAM,8CAFNX,EAAS,IAAIP,EAI3B,IAAImB,EAAMnB,EAAOgB,WAAWN,EAAKK,GAIjC,OAHAR,EAAOM,KAAKE,GACZR,EAAOa,OAAa,EAAND,GACdnB,EAAOI,WAAWM,EAAKH,EAAQA,GACxBA,GAUXP,EAAAJ,UAAAkB,MAAA,WACI,OAAO,IAAId,EAAOG,KAAKF,EAAGE,KAAKD,IAGnCF,EAAAJ,UAAAiB,KAAA,SAAKQ,GACDlB,KAAKF,EAAIoB,EAAOpB,EAChBE,KAAKD,EAAImB,EAAOnB,GAGpBF,EAAAJ,UAAA0B,IAAA,SAAID,GACAlB,KAAKF,GAAKoB,EAAOpB,EACjBE,KAAKD,GAAKmB,EAAOnB,GAGrBF,EAAAJ,UAAA2B,IAAA,SAAIF,GACAlB,KAAKF,GAAKoB,EAAOpB,EACjBE,KAAKD,GAAKmB,EAAOnB,GAGrBF,EAAAJ,UAAAwB,OAAA,SAAOT,GACHR,KAAKF,GAAKU,EACVR,KAAKD,GAAKS,GAGdX,EAAAJ,UAAAe,UAAA,WACI,IAAIV,EAAIE,KAAKF,EACTC,EAAIC,KAAKD,EACb,OAAOsB,KAAKC,KAAKxB,EAAIA,EAAIC,EAAIA,IAGjCF,EAAAJ,UAAA8B,eAAA,WACI,IAAIzB,EAAIE,KAAKF,EACTC,EAAIC,KAAKD,EACb,OAAOD,EAAIA,EAAIC,EAAIA,GAGvBF,EAAAJ,UAAAmB,OAAA,WACI,IAAIJ,EAAYR,KAAKQ,YACrBR,KAAKF,GAAKU,EACVR,KAAKD,GAAKS,GAGdX,EAAAJ,UAAA+B,KAAA,WACIxB,KAAKF,EAAI,EACTE,KAAKD,EAAI,GAEjBF,EAlGA,GAAalC,EAAAkC,wFCAb,IAAA4B,EAAA,WAcI,SAAAA,EAAYC,EAAiBC,EAAiBC,EAAiBC,QAAnD,IAAAH,MAAA,QAAiB,IAAAC,MAAA,QAAiB,IAAAC,MAAA,QAAiB,IAAAC,MAAA,GAC3D7B,KAAK0B,KAAOA,EACZ1B,KAAK2B,KAAOA,EACZ3B,KAAK4B,KAAOA,EACZ5B,KAAK6B,KAAOA,EAMpB,OAvBkBJ,EAAAK,gBAAd,SAA8BC,EAAgBC,GAC1C,QAAID,EAAQL,KAAOM,EAAQJ,MAAQG,EAAQH,KAAOI,EAAQN,MACtDK,EAAQJ,KAAOK,EAAQH,MAAQE,EAAQF,KAAOG,EAAQL,OAkB9DF,EAAAhC,UAAAwC,UAAA,SAAUf,GACN,OAAOO,EAAOK,gBAAgB9B,KAAMkB,IAE5CO,EAxBA,GAAa9D,EAAA8D,wFCAb,IAAAS,EAAAzE,EAAA,GACA0E,EAAA1E,EAAA,GAEA2E,EAAA,WAGI,SAAAA,IACIpC,KAAKqC,KAAO,IAAIH,EAAArC,OAChBG,KAAKsC,QAAU,IAAIH,EAAAV,OAc3B,OAXIlD,OAAAC,eAAI4D,EAAA3C,UAAA,WAAJ,WACI,OAAOO,KAAKqC,UAGhB,SAAQvD,GACJkB,KAAKqC,KAAK3B,KAAK5B,oCAGnBP,OAAAC,eAAI4D,EAAA3C,UAAA,cAAJ,WACI,OAAOO,KAAKsC,yCAEpBF,EAnBA,GAAsBzE,EAAAyE,0bCHtB,IAAAG,EAAA9E,EAAA,GACA0E,EAAA1E,EAAA,GAGA+E,EAAA,SAAAC,GAEI,SAAAD,IAAA,IAAAE,EACID,EAAAzE,KAAAgC,OAAOA,YACP0C,EAAKJ,QAAU,IAAIH,EAAAV,OACnBiB,EAAKC,QAAU,IAyBvB,OA9B4BC,EAAAJ,EAAAC,GAQxBlE,OAAAC,eAAIgE,EAAA/C,UAAA,cAAJ,WACI,OAAOO,KAAK2C,aAGhB,SAAW7D,GACPkB,KAAK2C,QAAU7D,mCAGnBP,OAAAC,eAAIgE,EAAA/C,UAAA,WAAJ,WACI,OAAOO,KAAKqC,UAGhB,SAAQvD,GACJ,IAAI+D,EAAM7C,KAAKqC,KACfQ,EAAInC,KAAK5B,GACT,IAAIgE,EAAS9C,KAAKsC,QACdS,EAAS/C,KAAK2C,QAClBG,EAAOpB,KAAOmB,EAAI/C,EAAIiD,EACtBD,EAAOnB,KAAOkB,EAAI9C,EAAIgD,EACtBD,EAAOlB,KAAOiB,EAAI/C,EAAIiD,EACtBD,EAAOjB,KAAOgB,EAAI9C,EAAIgD,mCAE9BP,EA9BA,CAA4BD,EAAAH,KAAfzE,EAAA6E,6bCJb,IAAAD,EAAA9E,EAAA,GACAyE,EAAAzE,EAAA,GAEAuF,EAAA,SAAAP,GAII,SAAAO,IAAA,IAAAN,EACID,EAAAzE,KAAAgC,OAAOA,KACP0C,EAAKO,MAAQ,EACb,IAAIC,KACJR,EAAKS,QAAUD,EACf,IAAME,EAAcJ,EAAOI,YAC3BF,EAAOG,OAASD,EAChB,IAAK,IAAIvF,EAAI,EAAGA,EAAIuF,IAAevF,EAC/BqF,EAAOrF,GAAK,IAAIqE,EAAArC,gBAwC5B,OApD4B+C,EAAAI,EAAAP,GAgBxBlE,OAAAC,eAAIwE,EAAAvD,UAAA,YAAJ,WACI,OAAOO,KAAKiD,WAGhB,SAASnE,GACLkB,KAAKiD,MAAQnE,mCAGjBP,OAAAC,eAAIwE,EAAAvD,UAAA,WAAJ,WACI,OAAOO,KAAKqC,UAGhB,SAAQvD,GACJ,IAAI+D,EAAM7C,KAAKqC,KACfQ,EAAInC,KAAK5B,GACT,IAAIgE,EAAS9C,KAAKsC,QACdgB,EAAWtD,KAAKuD,KAAO,EAC3BT,EAAOpB,KAAOmB,EAAI/C,EAAIwD,EACtBR,EAAOnB,KAAOkB,EAAI9C,EAAIuD,EACtBR,EAAOlB,KAAOiB,EAAI/C,EAAIwD,EACtBR,EAAOjB,KAAOgB,EAAI9C,EAAIuD,EAEtB,IAAIJ,EAASlD,KAAKmD,QAClBD,EAAO,GAAGpD,EAAIgD,EAAOpB,KACrBwB,EAAO,GAAGnD,EAAI+C,EAAOnB,KACrBuB,EAAO,GAAGpD,EAAIgD,EAAOlB,KACrBsB,EAAO,GAAGnD,EAAI+C,EAAOnB,KACrBuB,EAAO,GAAGpD,EAAIgD,EAAOlB,KACrBsB,EAAO,GAAGnD,EAAI+C,EAAOjB,KACrBqB,EAAO,GAAGpD,EAAIgD,EAAOpB,KACrBwB,EAAO,GAAGnD,EAAI+C,EAAOjB,sCAGzBtD,OAAAC,eAAIwE,EAAAvD,UAAA,cAAJ,WACI,OAAOO,KAAKmD,yCAhDTH,EAAAI,YAAqB,EAkDhCJ,EApDA,CAA4BT,EAAAH,KAAfzE,EAAAqF,6bCHb,IAAAQ,EAAA/F,EAAA,GAEAgG,EAAAhG,EAAA,GACAyE,EAAAzE,EAAA,GAMAiG,EAAA,SAAAjB,GAII,SAAAiB,IAAA,IAAAhB,EACID,EAAAzE,KAAAgC,OAAOA,YACP0C,EAAKiB,UAAY,IAAIzB,EAAArC,SAiG7B,OAvG8B+C,EAAAc,EAAAjB,GAU1BlE,OAAAC,eAAIkF,EAAAjE,UAAA,gBAAJ,WACI,OAAOO,KAAK2D,eAGhB,SAAa7E,GACTkB,KAAK2D,UAAY7E,mCAGrB4E,EAAAjE,UAAAmE,QAAA,SAAQ1C,EAAYd,GAQhB,GAPc,MAAVA,EAAgBA,GACZyD,UAAU,EACVjD,OAAQ,IAAIsB,EAAArC,QAGhBO,EAAOyD,UAAW,EAElB3C,aAAkBsC,EAAAhB,OAAQ,CAC1B,IACIsB,EAAe5C,EACnB,IAFI6C,EAAW/D,MAEF8C,OAAOb,UAAU6B,EAAahB,QAAS,CAChD,IAAIlC,EAASsB,EAAArC,OAAOI,WAAW8D,EAASlB,IAAKiB,EAAajB,KAC3CjC,EAAOJ,YACNuD,EAAShB,OAASe,EAAaf,SAC3C3C,EAAOyD,UAAW,EAClBjD,EAAOA,SACPR,EAAOQ,OAAOF,KAAKE,SAGxB,MAAIM,aAAkBuC,EAAAT,QA4DzB,MAAM,IAAIjC,MAAM,0CA3DhB,IAAIgD,EACAC,EAAe9C,EACnB,IAFI6C,EAAW/D,MAEF8C,OAAOb,UAAU+B,EAAalB,QAAS,CAChD,IAAImB,EAAeF,EAASlB,IACxBqB,EAAgBD,EAAanE,EAC7BqE,EAAgBF,EAAalE,EAC7BqE,EAAeL,EAAShB,OACxBsB,EAAeL,EAAalB,OAChC,GAAIoB,EAAgBG,EAAa3C,MAAQwC,EAAgBG,EAAazC,KAC9DuC,EAAgBE,EAAa1C,MAAQwC,EAAgBE,EAAaxC,MAElEzB,EAAOyD,UAAW,EAClB3B,EAAArC,OAAOY,aAAasD,EAASO,SAAUlE,EAAOQ,SACvCuD,EAAgBE,EAAaxC,KAEhCsC,EAAgBE,EAAaxC,KAAOuC,IACpChE,EAAOyD,UAAW,EAClBzD,EAAOQ,OAAS,IAAIsB,EAAArC,OAAO,EAAG,IAG3BsE,EAAgBE,EAAa1C,MAEhC0C,EAAa1C,KAAOwC,EAAgBC,IACpChE,EAAOyD,UAAW,EAClBzD,EAAOQ,OAAS,IAAIsB,EAAArC,OAAO,GAAI,SAGpC,GAAIsE,EAAgBE,EAAa1C,MAAQwC,EAAgBE,EAAaxC,KACrEqC,EAAgBG,EAAazC,KAEzBsC,EAAgBG,EAAazC,KAAOwC,IACpChE,EAAOyD,UAAW,EAClBzD,EAAOQ,OAAS,IAAIsB,EAAArC,OAAO,EAAG,IAE3BqE,EAAgBG,EAAa3C,MAEhC2C,EAAa3C,KAAOwC,EAAgBE,IACpChE,EAAOyD,UAAW,EAClBzD,EAAOQ,OAAS,IAAIsB,EAAArC,QAAQ,EAAG,SASvC,IAJA,IAAIqD,EAASc,EAAad,OACtBqB,EAAarB,EAAOG,OACpBmB,EAAqB,IAAItC,EAAArC,OACzB4E,EAA4BL,EAAeA,EACtCvG,EAAI,EAAGA,EAAI0G,IAAc1G,EAE9B,GADAqE,EAAArC,OAAOI,WAAWgE,EAAcf,EAAOrF,GAAI2G,GACvCA,EAAYjD,iBAAmBkD,EAAoB,CAEnDrE,EAAOyD,UAAW,EAClB3B,EAAArC,OAAOY,aAAa+D,EAAapE,EAAOQ,QACxC,QASpB,OAAOR,GAEfsD,EAvGA,CAA8BF,EAAAhB,QAAjB7E,EAAA+F,wJCTbgB,EAAAjH,EAAA,IACAiH,EAAAjH,EAAA,IACAiH,EAAAjH,EAAA,IACAiH,EAAAjH,EAAA,IACAiH,EAAAjH,EAAA,IACAiH,EAAAjH,EAAA,IACAiH,EAAAjH,EAAA,mFCLA,IAAAyE,EAAAzE,EAAA,GACAkH,EAAAlH,EAAA,GAEAmH,EAAA,WAOI,SAAAA,IACI5E,KAAK6E,KAAO,EACZ7E,KAAK8E,YAAc,EACnB9E,KAAK+E,WACL/E,KAAKgF,MAAQ,IAAIL,EAAAjB,SAkGzB,OA/FIkB,EAAAnF,UAAAwF,OAAA,SAAO1F,GACCS,KAAK8E,YAAc9E,KAAK+E,QAAQ1B,OAChCrD,KAAK+E,QAAQ/E,KAAK8E,eAAiBvF,GAGnCS,KAAK+E,QAAQ1B,OAAS,EAAIrD,KAAK+E,QAAQ1B,OACvCrD,KAAK+E,QAAQ/E,KAAK8E,eAAiBvF,IAI3CqF,EAAAnF,UAAAyF,UAAA,SAAU3F,GAGN,IAFA,IAAIuF,EAAc9E,KAAK8E,YACnBC,EAAU/E,KAAK+E,QACVlH,EAAI,EAAGA,EAAIiH,IAAejH,EAC/B,GAAI0B,GAAUwF,EAAQlH,GAQlB,OANIA,IADFiH,IAEEC,EAAQlH,GAAKkH,EAAQD,GACrBC,EAAQD,GAAe,WAG3B9E,KAAK8E,YAAcA,IAM/BF,EAAAnF,UAAA0F,MAAA,WACInF,KAAK8E,YAAc,GAGvBvG,OAAAC,eAAIoG,EAAAnF,UAAA,gBAAJ,WACI,OAAOO,KAAKgF,uCAGhBJ,EAAAnF,UAAA2F,KAAA,SAAKC,EAAYC,GAEbD,EAAKA,GAAM,EACXC,EAAaA,GAAc,EAS3B,IAPA,IAAIC,EAAwB,IAAIrD,EAAArC,OAC5B2F,EAAuB,IAAItD,EAAArC,OAC3B4F,GAAyC5B,UAAS,EAAOjD,OAAQ,IAAIsB,EAAArC,QACrE6F,EAA8B,IAAIxD,EAAArC,OAClC8F,EAA6B,IAAIzD,EAAArC,OAEjC+F,EAAeP,EAAKC,EACfO,EAAY,EAAGA,EAAYP,IAAcO,EAAW,CACzD,IAAIf,EAAc9E,KAAK8E,YACnBC,EAAU/E,KAAK+E,QACfe,EAAS9F,KAAKgF,MAGde,EAAWR,EACfQ,EAASrF,KAAKoF,EAAOjD,KAGrB,IAAImD,EAAUR,EACdQ,EAAQlG,EAAIgG,EAAOjD,IAAI/C,EAAIgG,EAAOxB,SAASxE,EAAI8F,EAC/CI,EAAQjG,EAAI+F,EAAOjD,IAAI9C,EAAI+F,EAAOxB,SAASvE,EAAI6F,EAC/CE,EAAOjD,IAAMmD,EAGb,IAAIC,GAAc,EACdC,EAAkBT,EAClBU,EAAiBT,EACrBS,EAAe3E,OACf,IAAK,IAAI3D,EAAI,EAAGA,EAAIiH,IAAejH,EAAG,CAClC,IAAI0B,EAASwF,EAAQlH,GACrBiI,EAAOlC,QAAQrE,EAAQ2G,GACnBA,EAAgBrC,WAChBoC,GAAc,EACdE,EAAe/E,IAAI8E,EAAgBtF,SAK3C,IAAIwF,EAAgBT,EACpB,GAAIM,EAAa,CAEbH,EAAOjD,IAAMkD,EAEb7D,EAAArC,OAAOiB,cAAcgF,EAAOxB,SAAU6B,EAAgBC,GACtDN,EAAOxB,SAAS5D,KAAK0F,GAGrB,IAAIC,EAAUb,EACda,EAAQvG,EAAIgG,EAAOjD,IAAI/C,EAAIgG,EAAOxB,SAASxE,EAAI8F,EAC/CS,EAAQtG,EAAI+F,EAAOjD,IAAI9C,EAAI+F,EAAOxB,SAASvE,EAAI6F,EAC/CE,EAAOjD,IAAMwD,GAIrBrG,KAAK6E,MAAQQ,GAErBT,EA7GA,GAAajH,EAAAiH","file":"model.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","export class Vector {\r\n    public static subVectors(vec1:Vector, vec2:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec1.x - vec2.x;\r\n        result.y = vec1.y - vec2.y;\r\n        return result;\r\n    }\r\n\r\n    public static addVectors(vec1:Vector, vec2:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec1.x + vec2.x;\r\n        result.y = vec1.y + vec2.y;\r\n        return result;\r\n    }\r\n\r\n    public static mulVectorMag(vec:Vector, magnitude:number, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec.x * magnitude;\r\n        result.y = vec.y * magnitude;\r\n        return result;\r\n    }\r\n\r\n    public static normalVector(vec:Vector, result?:Vector):Vector {\r\n        if (! result) result = vec.clone();\r\n        else result.copy(vec);\r\n        result.normal();\r\n        return result;\r\n    }\r\n\r\n    public static dotVectors(vec1:Vector, vec2:Vector):number {\r\n        return vec1.x * vec2.x + vec1.y * vec2.y;\r\n    }\r\n\r\n    public static reflectVector(vec:Vector, normal:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        else if (result == vec) {\r\n            throw new Error(\"The result shouldn't be argument vec.\");\r\n        }\r\n        let dot = Vector.dotVectors(vec, normal);\r\n        result.copy(normal);\r\n        result.mulMag(dot * 2);\r\n        Vector.subVectors(vec, result, result);\r\n        return result;\r\n    }\r\n\r\n    x:number;\r\n    y:number;\r\n    constructor(x:number = 0, y:number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    clone():Vector {\r\n        return new Vector(this.x, this.y);\r\n    }\r\n\r\n    copy(target:Vector):void {\r\n        this.x = target.x;\r\n        this.y = target.y;\r\n    }\r\n\r\n    sub(target:Vector):void {\r\n        this.x -= target.x;\r\n        this.y -= target.y;\r\n    }\r\n\r\n    add(target:Vector):void {\r\n        this.x += target.x;\r\n        this.y += target.y;\r\n    }\r\n\r\n    mulMag(magnitude:number):void {\r\n        this.x *= magnitude;\r\n        this.y *= magnitude;\r\n    }\r\n\r\n    magnitude():number {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n\r\n    manitudeSquare():number {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        return x * x + y * y;\r\n    }\r\n\r\n    normal():void {\r\n        let magnitude = this.magnitude();\r\n        this.x /= magnitude;\r\n        this.y /= magnitude;\r\n    }\r\n\r\n    zero():void {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}","export class Bounds {\r\n    public static intersectBounds(bounds1:Bounds, bounds2:Bounds):boolean {\r\n        if (bounds1.minX > bounds2.maxX || bounds1.maxX < bounds2.minX || \r\n            bounds1.minY > bounds2.maxY || bounds1.maxY < bounds2.minY) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    minX:number;\r\n    minY:number;\r\n    maxX:number;\r\n    maxY:number;\r\n    constructor(minX:number = 0, minY:number = 0, maxX:number = 0, maxY:number = 0) {\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    }\r\n\r\n    intersect(target:Bounds):boolean {\r\n        return Bounds.intersectBounds(this, target);\r\n    }\r\n}","import { Vector } from \"./vector\";\r\nimport { Bounds } from \"./bounds\";\r\n\r\nexport abstract class Obj {\r\n    protected _pos:Vector;\r\n    protected _bounds:Bounds;\r\n    constructor() {\r\n        this._pos = new Vector();\r\n        this._bounds = new Bounds();\r\n    }\r\n\r\n    get pos():Vector {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        this._pos.copy(value);\r\n    }\r\n\r\n    get bounds():Bounds {\r\n        return this._bounds;\r\n    }\r\n}","import { Obj } from \"./object\";\r\nimport { Bounds } from \"./bounds\";\r\nimport { Vector } from \"./vector\";\r\n\r\nexport class Circle extends Obj {\r\n    private _radius:number;\r\n    constructor() {\r\n        super();\r\n        this._bounds = new Bounds;\r\n        this._radius = 0;\r\n    }\r\n\r\n    get radius():number {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius(value:number) {\r\n        this._radius = value;\r\n    }\r\n\r\n    get pos() {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        var pos = this._pos;\r\n        pos.copy(value);\r\n        var bounds = this._bounds;\r\n        var radius = this._radius;\r\n        bounds.minX = pos.x - radius;\r\n        bounds.minY = pos.y - radius;\r\n        bounds.maxX = pos.x + radius;\r\n        bounds.maxY = pos.y + radius;\r\n    }\r\n}","import { Obj } from \"./object\";\r\nimport { Vector } from \"./vector\";\r\n\r\nexport class Square extends Obj {\r\n    private _size:number;\r\n    static POINT_COUNT:number = 4;\r\n    private _points:Vector[];\r\n    constructor() {\r\n        super();\r\n        this._size = 0;\r\n        let points:Vector[] = [];\r\n        this._points = points;\r\n        const POINT_COUNT = Square.POINT_COUNT;\r\n        points.length = POINT_COUNT;\r\n        for (let i = 0; i < POINT_COUNT; ++i) {\r\n            points[i] = new Vector();\r\n        }\r\n    }\r\n\r\n    get size() {\r\n        return this._size;\r\n    }\r\n\r\n    set size(value:number) {\r\n        this._size = value;\r\n    }\r\n\r\n    get pos() {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        var pos = this._pos;\r\n        pos.copy(value);\r\n        var bounds = this._bounds;\r\n        var halfSize = this.size / 2;\r\n        bounds.minX = pos.x - halfSize;\r\n        bounds.minY = pos.y - halfSize;\r\n        bounds.maxX = pos.x + halfSize;\r\n        bounds.maxY = pos.y + halfSize;\r\n\r\n        let points = this._points;\r\n        points[0].x = bounds.minX;\r\n        points[0].y = bounds.minY;\r\n        points[1].x = bounds.maxX;\r\n        points[1].y = bounds.minY;\r\n        points[2].x = bounds.maxX;\r\n        points[2].y = bounds.maxY;\r\n        points[3].x = bounds.minX;\r\n        points[3].y = bounds.maxY;\r\n    }\r\n\r\n    get points() {\r\n        return this._points;\r\n    }\r\n}","import { Circle } from \"./circle\";\r\nimport { Obj } from \"./object\";\r\nimport { Square } from \"./square\";\r\nimport { Vector } from \"./vector\";\r\n\r\nexport interface ICollideResult {\r\n    collided: boolean; normal:Vector;\r\n}\r\n\r\nexport class MyCircle extends Circle {\r\n\r\n    private _velocity:Vector;\r\n\r\n    constructor() {\r\n        super();\r\n        this._velocity = new Vector();\r\n\r\n    }\r\n\r\n    get velocity():Vector {\r\n        return this._velocity;\r\n    }\r\n\r\n    set velocity(value:Vector) {\r\n        this._velocity = value;\r\n    }\r\n\r\n    collide(target:Obj, result?:ICollideResult) {\r\n        if (result == null) result = {\r\n                collided: false,\r\n                normal: new Vector(),\r\n            };\r\n        else {\r\n            result.collided = false;\r\n        }\r\n        if (target instanceof Circle) {\r\n            let myCircle = this;\r\n            let targetCircle = target as Circle;\r\n            if (myCircle.bounds.intersect(targetCircle.bounds)) {\r\n                let normal = Vector.subVectors(myCircle.pos, targetCircle.pos);\r\n                let distance = normal.magnitude();\r\n                if (distance < (myCircle.radius + targetCircle.radius)) {\r\n                    result.collided = true;\r\n                    normal.normal();\r\n                    result.normal.copy(normal);\r\n                }\r\n            }\r\n        } else if (target instanceof Square) {\r\n            let myCircle = this;\r\n            let targetSquare = target as Square;\r\n            if (myCircle.bounds.intersect(targetSquare.bounds)) {\r\n                let circleCenter = myCircle.pos;\r\n                let circleCenterX = circleCenter.x;\r\n                let circleCenterY = circleCenter.y;\r\n                let circleRadius = myCircle.radius;\r\n                let squareBounds = targetSquare.bounds;\r\n                if (circleCenterX > squareBounds.minX && circleCenterX < squareBounds.maxX) {\r\n                    if (circleCenterY > squareBounds.minY && circleCenterY < squareBounds.maxY) {\r\n                        //The center is inside the bounds (namely, inside the square).\r\n                        result.collided = true;\r\n                        Vector.normalVector(myCircle.velocity, result.normal);\r\n                    } else if (circleCenterY > squareBounds.maxY) {\r\n                        //The center is downside the bounds.\r\n                        if (circleCenterY - squareBounds.maxY < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(0, 1);\r\n                        }\r\n\r\n                    } else if (circleCenterY < squareBounds.minY) {\r\n                        //The center is upside the bounds.\r\n                        if (squareBounds.minY - circleCenterY < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(0, -1);\r\n                        }\r\n                    }\r\n                } else if (circleCenterY > squareBounds.minY && circleCenterY < squareBounds.maxY) {\r\n                    if (circleCenterX > squareBounds.maxX) {\r\n                        //The center is right of the bounds.\r\n                        if (circleCenterX - squareBounds.maxX < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(1, 0);\r\n                        }\r\n                    } else if (circleCenterX < squareBounds.minX) {\r\n                        //The center is left of the bounds.\r\n                        if (squareBounds.minX - circleCenterX < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(-1, 0);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //Detect if any point of square is inside the circle.\r\n                    let points = targetSquare.points;\r\n                    let pointCount = points.length;\r\n                    let pointHelper:Vector = new Vector();\r\n                    let circleRadiusSquare:number = circleRadius * circleRadius;\r\n                    for (let i = 0; i < pointCount; ++i) {\r\n                        Vector.subVectors(circleCenter, points[i], pointHelper);\r\n                        if (pointHelper.manitudeSquare() < circleRadiusSquare) {\r\n                            //The point is inside the circle.\r\n                            result.collided = true;\r\n                            Vector.normalVector(pointHelper, result.normal);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error(\"Invalid shape for collision detection.\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","export * from \"./vector\";\r\nexport * from \"./bounds\";\r\nexport * from \"./object\";\r\nexport * from \"./circle\";\r\nexport * from \"./square\";\r\nexport * from \"./world\";\r\nexport * from \"./my_circle\";\r\n","import { Obj } from \"./object\";\r\nimport { Vector } from \"./vector\";\r\nimport { MyCircle, ICollideResult } from \"./my_circle\";\r\n\r\nexport class World {\r\n\r\n    time:number;\r\n    objectCount:number;\r\n    objects: Obj[];\r\n    myObj:MyCircle;\r\n\r\n    constructor() {\r\n        this.time = 0;\r\n        this.objectCount = 0;\r\n        this.objects = [];\r\n        this.myObj = new MyCircle();\r\n    }\r\n\r\n    addObj(object:Obj) {\r\n        if (this.objectCount < this.objects.length) {\r\n            this.objects[this.objectCount++] = object;\r\n        }\r\n        else {\r\n            this.objects.length = 2 * this.objects.length;\r\n            this.objects[this.objectCount++] = object;\r\n        }\r\n    }\r\n\r\n    removeObj(object:Obj) {\r\n        let objectCount = this.objectCount;\r\n        let objects = this.objects;\r\n        for (let i = 0; i < objectCount; ++i) {\r\n            if (object == objects[i]) {\r\n                --objectCount;\r\n                if (i < objectCount) {\r\n                    objects[i] = objects[objectCount];\r\n                    objects[objectCount] = null;\r\n                }\r\n\r\n                this.objectCount = objectCount;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.objectCount = 0;\r\n    }\r\n\r\n    get myObject() {\r\n        return this.myObj;\r\n    }\r\n\r\n    step(dt: number, iterations: number):void {\r\n\r\n        dt = dt || 0;\r\n        iterations = iterations || 1;\r\n\r\n        let cachePosHelper:Vector = new Vector();\r\n        let nextPosHelper:Vector = new Vector();\r\n        let collisionResultHelper:ICollideResult = { collided:false, normal: new Vector()};\r\n        let collisionNormlHelper:Vector = new Vector();\r\n        let reflectResultHelper:Vector = new Vector();\r\n\r\n        let minDt:number = dt / iterations;\r\n        for (let iteration = 0; iteration < iterations; ++iteration) {\r\n            let objectCount = this.objectCount;\r\n            let objects = this.objects;\r\n            let myBody = this.myObj;\r\n\r\n            //Cache current position.\r\n            let cachePos = cachePosHelper;\r\n            cachePos.copy(myBody.pos);\r\n\r\n            //Caculate next position.\r\n            let nextPos = nextPosHelper;\r\n            nextPos.x = myBody.pos.x + myBody.velocity.x * minDt;\r\n            nextPos.y = myBody.pos.y + myBody.velocity.y * minDt;\r\n            myBody.pos = nextPos;\r\n\r\n            //Detect collision.\r\n            let collisioned = false;\r\n            let collisionResult = collisionResultHelper;\r\n            let collsionNormal = collisionNormlHelper;\r\n            collsionNormal.zero();\r\n            for (let i = 0; i < objectCount; ++i) {\r\n                let object = objects[i];\r\n                myBody.collide(object, collisionResult);\r\n                if (collisionResult.collided) {\r\n                    collisioned = true;\r\n                    collsionNormal.add(collisionResult.normal);\r\n                }\r\n            }\r\n\r\n            //Final collsion result.\r\n            let reflectResult = reflectResultHelper;\r\n            if (collisioned) {\r\n                //Recover to cached pre postion.\r\n                myBody.pos = cachePos;\r\n                //Set new velocity according to collision normal.\r\n                Vector.reflectVector(myBody.velocity, collsionNormal, reflectResult);\r\n                myBody.velocity.copy(reflectResult);\r\n\r\n                //Move\r\n                let nextPos = nextPosHelper;\r\n                nextPos.x = myBody.pos.x + myBody.velocity.x * minDt;\r\n                nextPos.y = myBody.pos.y + myBody.velocity.y * minDt;\r\n                myBody.pos = nextPos;\r\n            }\r\n        }\r\n\r\n        this.time += dt;\r\n    }\r\n}"],"sourceRoot":""}