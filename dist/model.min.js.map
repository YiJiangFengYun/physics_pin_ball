{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/vector.ts","webpack:///./src/object.ts","webpack:///./src/rectangle.ts","webpack:///./src/bounds.ts","webpack:///./src/circle.ts","webpack:///./src/triangle.ts","webpack:///./src/index.ts","webpack:///./src/world.ts","webpack:///./node_modules/eventemitter3/index.js","webpack:///./src/my_circle.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector","x","y","this","subVectors","vec1","vec2","result","addVectors","mulVectorMag","vec","magnitude","normalVector","copy","clone","normal","dotVectors","reflectVector","Error","dot","mulMag","target","sub","add","Math","sqrt","manitudeSquare","zero","vector_1","bounds_1","Obj","_pos","_bounds","Bounds","updatePos","object_1","Rectangle","_super","_this","_width","_height","points","_points","POINT_COUNT","length","_setBounds","_setPoints","__extends","pos","bounds","halfWidth","halfHeight","minX","minY","maxX","maxY","intersectBounds","bounds1","bounds2","intersect","Circle","_radius","radius","rectangle_1","DirectIRTriangle","IRTriangle","_size","halfSize","__export","World","time","objectCount","objects","myCircleCount","myCircles","addObj","removeObj","clearObjs","addMyCircle","myCircle","removeMyCircle","clearMyCircles","step","dt","iterations","cachePosHelper","nextPosHelper","collisionResultHelper","collided","collisionNormlHelper","reflectResultHelper","minDt","iteration","myCircleIndex","myBody","cachePos","nextPos","velocity","collisionResult","collsionNormal","collide","emit","reflectResult","cacheMagnitude","nextPos_1","EventEmitter","has","prefix","Events","EE","fn","context","once","_events","_eventsCount","__proto__","eventNames","events","names","push","slice","getOwnPropertySymbols","concat","listeners","event","exists","evt","available","ee","Array","a1","a2","a3","a4","a5","args","len","arguments","removeListener","undefined","apply","j","on","listener","removeAllListeners","off","addListener","setMaxListeners","prefixed","circle_1","triangle_1","MyCircle","_velocity","targetCircle","targetSquare","circleCenterX","circleCenter","circleCenterY","circleRadius","squareBounds","pointCount","pointHelper","circleRadiusSquare","targetTriangle","circleCenterPos","triangleBounds","triangleBoundsMin","triangleBoundsMax","circlArea","findArea","areaX","areaY","sameXDirect","direct","sameYDirect","point","abs","vectorTriangleToCenter"],"mappings":"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","file":"model.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","export class Vector {\r\n    public static subVectors(vec1:Vector, vec2:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec1.x - vec2.x;\r\n        result.y = vec1.y - vec2.y;\r\n        return result;\r\n    }\r\n\r\n    public static addVectors(vec1:Vector, vec2:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec1.x + vec2.x;\r\n        result.y = vec1.y + vec2.y;\r\n        return result;\r\n    }\r\n\r\n    public static mulVectorMag(vec:Vector, magnitude:number, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        result.x = vec.x * magnitude;\r\n        result.y = vec.y * magnitude;\r\n        return result;\r\n    }\r\n\r\n    public static normalVector(vec:Vector, result?:Vector):Vector {\r\n        if (! result) result = vec.clone();\r\n        else result.copy(vec);\r\n        result.normal();\r\n        return result;\r\n    }\r\n\r\n    public static dotVectors(vec1:Vector, vec2:Vector):number {\r\n        return vec1.x * vec2.x + vec1.y * vec2.y;\r\n    }\r\n\r\n    public static reflectVector(vec:Vector, normal:Vector, result?:Vector):Vector {\r\n        if (! result) result = new Vector();\r\n        else if (result == vec) {\r\n            throw new Error(\"The result shouldn't be argument vec.\");\r\n        }\r\n        let dot = Vector.dotVectors(vec, normal);\r\n        result.copy(normal);\r\n        result.mulMag(dot * 2);\r\n        Vector.subVectors(vec, result, result);\r\n        return result;\r\n    }\r\n\r\n    x:number;\r\n    y:number;\r\n    constructor(x:number = 0, y:number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    clone():Vector {\r\n        return new Vector(this.x, this.y);\r\n    }\r\n\r\n    copy(target:Vector):void {\r\n        this.x = target.x;\r\n        this.y = target.y;\r\n    }\r\n\r\n    sub(target:Vector):void {\r\n        this.x -= target.x;\r\n        this.y -= target.y;\r\n    }\r\n\r\n    add(target:Vector):void {\r\n        this.x += target.x;\r\n        this.y += target.y;\r\n    }\r\n\r\n    mulMag(magnitude:number):void {\r\n        this.x *= magnitude;\r\n        this.y *= magnitude;\r\n    }\r\n\r\n    magnitude():number {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n\r\n    manitudeSquare():number {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        return x * x + y * y;\r\n    }\r\n\r\n    normal():void {\r\n        let magnitude = this.magnitude();\r\n        this.x /= magnitude;\r\n        this.y /= magnitude;\r\n    }\r\n\r\n    zero():void {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}","import { Vector } from \"./vector\";\r\nimport { Bounds } from \"./bounds\";\r\n\r\nexport abstract class Obj {\r\n    protected _pos:Vector;\r\n    protected _bounds:Bounds;\r\n    constructor() {\r\n        this._pos = new Vector();\r\n        this._bounds = new Bounds();\r\n    }\r\n\r\n    get pos():Vector {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        this._pos.copy(value);\r\n    }\r\n\r\n    get bounds():Bounds {\r\n        return this._bounds;\r\n    }\r\n\r\n    updatePos(value?:Vector) {\r\n        if (value) {\r\n            this._pos = value;\r\n        }\r\n    }\r\n}","import { Obj } from \"./object\";\r\nimport { Vector } from \"./vector\";\r\n\r\nexport class Rectangle extends Obj {\r\n    private _width:number;\r\n    private _height:number;\r\n    static POINT_COUNT:number = 4;\r\n    private _points:Vector[];\r\n    constructor() {\r\n        super();\r\n        this._width = 0;\r\n        this._height = 0;\r\n        let points:Vector[] = [];\r\n        this._points = points;\r\n        const POINT_COUNT = Rectangle.POINT_COUNT;\r\n        points.length = POINT_COUNT;\r\n        for (let i = 0; i < POINT_COUNT; ++i) {\r\n            points[i] = new Vector();\r\n        }\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value:number) {\r\n        this._width = value;\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value:number) {\r\n        this._height = value;\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get pos() {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        var pos = this._pos;\r\n        pos.copy(value);\r\n        \r\n        this._setBounds();\r\n        this._setPoints();\r\n        \r\n    }\r\n\r\n    updatePos(value?:Vector) {\r\n        super.updatePos(value);\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get points() {\r\n        return this._points;\r\n    }\r\n\r\n    _setBounds() {\r\n        let pos = this._pos;\r\n        let bounds = this._bounds;\r\n        let halfWidth = this._width / 2;\r\n        let halfHeight = this._height / 2;\r\n        bounds.minX = pos.x - halfWidth;\r\n        bounds.minY = pos.y - halfHeight;\r\n        bounds.maxX = pos.x + halfWidth;\r\n        bounds.maxY = pos.y + halfHeight;\r\n    }\r\n\r\n    _setPoints() {\r\n        let bounds = this._bounds;\r\n        let points = this._points;\r\n        //0 is 0(y)0(x)\r\n        points[0].x = bounds.minX;\r\n        points[0].y = bounds.minY;\r\n        //1 is 0(y)1(x)\r\n        points[1].x = bounds.maxX;\r\n        points[1].y = bounds.minY;\r\n        //3 is 1(y)1(x)\r\n        points[3].x = bounds.maxX;\r\n        points[3].y = bounds.maxY;\r\n        //2 is 1(y)0(x)\r\n        points[2].x = bounds.minX;\r\n        points[2].y = bounds.maxY;\r\n    }\r\n}","export class Bounds {\r\n    public static intersectBounds(bounds1:Bounds, bounds2:Bounds):boolean {\r\n        if (bounds1.minX > bounds2.maxX || bounds1.maxX < bounds2.minX || \r\n            bounds1.minY > bounds2.maxY || bounds1.maxY < bounds2.minY) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    minX:number;\r\n    minY:number;\r\n    maxX:number;\r\n    maxY:number;\r\n    constructor(minX:number = 0, minY:number = 0, maxX:number = 0, maxY:number = 0) {\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    }\r\n\r\n    intersect(target:Bounds):boolean {\r\n        return Bounds.intersectBounds(this, target);\r\n    }\r\n}","import { Obj } from \"./object\";\r\nimport { Bounds } from \"./bounds\";\r\nimport { Vector } from \"./vector\";\r\n\r\nexport class Circle extends Obj {\r\n    private _radius:number;\r\n    constructor() {\r\n        super();\r\n        this._radius = 0;\r\n        this._setBounds();\r\n    }\r\n\r\n    get radius():number {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius(value:number) {\r\n        this._radius = value;\r\n        this._setBounds();\r\n    }\r\n\r\n    get pos() {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        var pos = this._pos;\r\n        pos.copy(value);\r\n        this._setBounds();\r\n    }\r\n\r\n    updatePos(value?:Vector) {\r\n        super.updatePos(value);\r\n        this._setBounds();\r\n    }\r\n\r\n    _setBounds() {\r\n        let pos = this._pos;\r\n        var bounds = this._bounds;\r\n        var radius = this._radius;\r\n        bounds.minX = pos.x - radius;\r\n        bounds.minY = pos.y - radius;\r\n        bounds.maxX = pos.x + radius;\r\n        bounds.maxY = pos.y + radius;\r\n    }\r\n}","import { Obj } from \"./object\";\r\nimport { Vector } from \"./vector\";\r\nimport { Rectangle } from \"./rectangle\";\r\n\r\n//Right angle direct.\r\nexport enum DirectIRTriangle {\r\n    LEFT_UP = 0,\r\n    RIGHT_UP = 1,\r\n    RIGHT_BOTTOM = 3,\r\n    LEFT_BOTTOM = 2,\r\n}\r\n\r\nexport class IRTriangle extends Obj {\r\n    public direct:DirectIRTriangle;\r\n    private _size:number;\r\n    static POINT_COUNT:number = 4;\r\n    private _points:Vector[];\r\n    constructor() {\r\n        super();\r\n        this._size = 0;\r\n        let points:Vector[] = [];\r\n        this._points = points;\r\n        const POINT_COUNT = Rectangle.POINT_COUNT;\r\n        points.length = POINT_COUNT;\r\n        for (let i = 0; i < POINT_COUNT; ++i) {\r\n            points[i] = new Vector();\r\n        }\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get size() {\r\n        return this._size;\r\n    }\r\n\r\n    set size(value:number) {\r\n        this._size = value;\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get pos() {\r\n        return this._pos;\r\n    }\r\n\r\n    set pos(value:Vector) {\r\n        var pos = this._pos;\r\n        pos.copy(value);\r\n        \r\n        this._setBounds();\r\n        this._setPoints();\r\n        \r\n    }\r\n\r\n    updatePos(value?:Vector) {\r\n        super.updatePos(value);\r\n        this._setBounds();\r\n        this._setPoints();\r\n    }\r\n\r\n    get points() {\r\n        return this._points;\r\n    }\r\n\r\n    _setBounds() {\r\n        let pos = this._pos;\r\n        let bounds = this._bounds;\r\n        let halfSize = this._size / 2;\r\n        bounds.minX = pos.x - halfSize;\r\n        bounds.minY = pos.y - halfSize;\r\n        bounds.maxX = pos.x + halfSize;\r\n        bounds.maxY = pos.y + halfSize;\r\n    }\r\n\r\n    _setPoints() {\r\n        let bounds = this._bounds;\r\n        let points = this._points;\r\n        //0 is 0(y)0(x)\r\n        points[0].x = bounds.minX;\r\n        points[0].y = bounds.minY;\r\n        //1 is 0(y)1(x)\r\n        points[1].x = bounds.maxX;\r\n        points[1].y = bounds.minY;\r\n        //3 is 1(y)1(x)\r\n        points[3].x = bounds.maxX;\r\n        points[3].y = bounds.maxY;\r\n        //2 is 1(y)0(x)\r\n        points[2].x = bounds.minX;\r\n        points[2].y = bounds.maxY;\r\n    }\r\n}","export * from \"./vector\";\r\nexport * from \"./bounds\";\r\nexport * from \"./object\";\r\nexport * from \"./circle\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./triangle\";\r\nexport * from \"./world\";\r\nexport * from \"./my_circle\";\r\n","import { Obj } from \"./object\";\r\nimport { Vector } from \"./vector\";\r\nimport { MyCircle, ICollideResult } from \"./my_circle\";\r\nimport * as eventemitter3 from \"eventemitter3\";\r\n\r\nexport class World extends eventemitter3.EventEmitter {\r\n\r\n    time:number;\r\n    objectCount:number;\r\n    objects: Obj[];\r\n    myCircleCount:number;\r\n    myCircles:MyCircle[];\r\n\r\n    constructor() {\r\n        super()\r\n        this.time = 0;\r\n        this.objectCount = 0;\r\n        this.objects = [];\r\n        this.myCircleCount = 0;\r\n        this.myCircles = [];\r\n    }\r\n\r\n    addObj(object:Obj) {\r\n        if (this.objectCount < this.objects.length) {\r\n            this.objects[this.objectCount++] = object;\r\n        }\r\n        else {\r\n            this.objects.length = 2 * this.objects.length;\r\n            this.objects[this.objectCount++] = object;\r\n        }\r\n    }\r\n\r\n    removeObj(object:Obj) {\r\n        let objectCount = this.objectCount;\r\n        let objects = this.objects;\r\n        for (let i = 0; i < objectCount; ++i) {\r\n            if (object == objects[i]) {\r\n                --objectCount;\r\n                if (i < objectCount) {\r\n                    objects[i] = objects[objectCount];\r\n                    objects[objectCount] = null;\r\n                }\r\n\r\n                this.objectCount = objectCount;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    clearObjs() {\r\n        this.objectCount = 0;\r\n    }\r\n\r\n    addMyCircle(myCircle:MyCircle) {\r\n        if (this.myCircleCount < this.myCircles.length) {\r\n            this.myCircles[this.myCircleCount++] = myCircle;\r\n        }\r\n        else {\r\n            this.myCircles.length = 2 * this.myCircles.length;\r\n            this.myCircles[this.myCircleCount++] = myCircle;\r\n        }\r\n    }\r\n\r\n    removeMyCircle(myCircle:MyCircle) {\r\n        let myCircleCount = this.myCircleCount;\r\n        let myCircles = this.myCircles;\r\n        for (let i = 0; i < myCircleCount; ++i) {\r\n            if (myCircle == myCircles[i]) {\r\n                --myCircleCount;\r\n                if (i < myCircleCount) {\r\n                    myCircles[i] = myCircles[myCircleCount];\r\n                    myCircles[myCircleCount] = null;\r\n                }\r\n\r\n                this.myCircleCount = myCircleCount;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    clearMyCircles() {\r\n        this.myCircleCount = 0;\r\n    }\r\n\r\n    step(dt: number, iterations: number):void {\r\n\r\n        dt = dt || 0;\r\n        iterations = iterations || 1;\r\n\r\n        let cachePosHelper:Vector = new Vector();\r\n        let nextPosHelper:Vector = new Vector();\r\n        let collisionResultHelper:ICollideResult = { collided:false, normal: new Vector()};\r\n        let collisionNormlHelper:Vector = new Vector();\r\n        let reflectResultHelper:Vector = new Vector();\r\n\r\n        let minDt:number = dt / iterations;\r\n        for (let iteration = 0; iteration < iterations; ++iteration) {\r\n            let myCircleCount = this.myCircleCount;\r\n            let myCircles = this.myCircles;\r\n            for (let myCircleIndex = 0; myCircleIndex < myCircleCount; ++myCircleIndex) {\r\n                let objectCount = this.objectCount;\r\n                let objects = this.objects;\r\n                let myBody = myCircles[myCircleIndex];\r\n    \r\n                //Cache current position.\r\n                let cachePos = cachePosHelper;\r\n                cachePos.copy(myBody.pos);\r\n    \r\n                //Caculate next position.\r\n                let nextPos = nextPosHelper;\r\n                nextPos.x = myBody.pos.x + myBody.velocity.x * minDt;\r\n                nextPos.y = myBody.pos.y + myBody.velocity.y * minDt;\r\n                myBody.pos = nextPos;\r\n    \r\n                //Detect collision.\r\n                let collided = false;\r\n                let collisionResult = collisionResultHelper;\r\n                let collsionNormal = collisionNormlHelper;\r\n                collsionNormal.zero();\r\n                for (let i = 0; i < objectCount; ++i) {\r\n                    let object = objects[i];\r\n                    myBody.collide(object, collisionResult);\r\n                    if (collisionResult.collided) {\r\n                        collided = true;\r\n                        collsionNormal.add(collisionResult.normal);\r\n                        this.emit(\"collided\", object);\r\n                    }\r\n                }\r\n    \r\n                //Final collsion result.\r\n                let reflectResult = reflectResultHelper;\r\n                if (collided) {\r\n                    //Recover to cached pre postion.\r\n                    myBody.pos = cachePos;\r\n                    let cacheMagnitude = myBody.velocity.magnitude();\r\n                    //Set new velocity according to collision normal.\r\n                    Vector.reflectVector(myBody.velocity, collsionNormal, reflectResult);\r\n\r\n                    // if (Math.abs(reflectResult.magnitude() - myBody.velocity.magnitude()) > 10) \r\n                    //     throw new Error('Velocity is changed!');\r\n                    // myBody.velocity.copy(reflectResult);\r\n    \r\n                    reflectResult.normal();\r\n                    reflectResult.mulMag(cacheMagnitude);\r\n                    myBody.velocity.copy(reflectResult);\r\n    \r\n                    //Move\r\n                    let nextPos = nextPosHelper;\r\n                    nextPos.x = myBody.pos.x + myBody.velocity.x * minDt;\r\n                    nextPos.y = myBody.pos.y + myBody.velocity.y * minDt;\r\n                    myBody.pos = nextPos;\r\n\r\n                }\r\n            }\r\n\r\n            \r\n        }\r\n\r\n        this.time += dt;\r\n    }\r\n}","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @api private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {Mixed} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Boolean} exists Only check if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {Mixed} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n         listeners.fn === fn\n      && (!once || listeners.once)\n      && (!context || listeners.context === context)\n    ) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n           listeners[i].fn !== fn\n        || (once && !listeners[i].once)\n        || (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {String|Symbol} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import { Circle } from \"./circle\";\r\nimport { Obj } from \"./object\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Vector } from \"./vector\";\r\nimport { IRTriangle } from \"./triangle\";\r\n\r\nexport interface ICollideResult {\r\n    collided: boolean; normal:Vector;\r\n}\r\n\r\nexport class MyCircle extends Circle {\r\n\r\n    private _velocity:Vector;\r\n\r\n    constructor() {\r\n        super();\r\n        this._velocity = new Vector();\r\n\r\n    }\r\n\r\n    get velocity():Vector {\r\n        return this._velocity;\r\n    }\r\n\r\n    set velocity(value:Vector) {\r\n        this._velocity = value;\r\n    }\r\n\r\n    collide(target:Obj, result?:ICollideResult) {\r\n        if (result == null) result = {\r\n                collided: false,\r\n                normal: new Vector(),\r\n            };\r\n        else {\r\n            result.collided = false;\r\n        }\r\n        if (target instanceof Circle) {\r\n            let myCircle = this;\r\n            let targetCircle = target as Circle;\r\n            if (myCircle.bounds.intersect(targetCircle.bounds)) {\r\n                let normal = Vector.subVectors(myCircle.pos, targetCircle.pos);\r\n                let distance = normal.magnitude();\r\n                if (distance < (myCircle.radius + targetCircle.radius)) {\r\n                    result.collided = true;\r\n                    normal.normal();\r\n                    result.normal.copy(normal);\r\n                }\r\n            }\r\n        } else if (target instanceof Rectangle) {\r\n            let myCircle = this;\r\n            let targetSquare = target as Rectangle;\r\n            if (myCircle.bounds.intersect(targetSquare.bounds)) {\r\n                let circleCenter = myCircle.pos;\r\n                let circleCenterX = circleCenter.x;\r\n                let circleCenterY = circleCenter.y;\r\n                let circleRadius = myCircle.radius;\r\n                let squareBounds = targetSquare.bounds;\r\n                if (circleCenterX > squareBounds.minX && circleCenterX < squareBounds.maxX) {\r\n                    if (circleCenterY > squareBounds.minY && circleCenterY < squareBounds.maxY) {\r\n                        //The center is inside the bounds (namely, inside the square).\r\n                        result.collided = true;\r\n                        Vector.normalVector(myCircle.velocity, result.normal);\r\n                    } else if (circleCenterY > squareBounds.maxY) {\r\n                        //The center is downside the bounds.\r\n                        if (circleCenterY - squareBounds.maxY < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(0, 1);\r\n                        }\r\n\r\n                    } else if (circleCenterY < squareBounds.minY) {\r\n                        //The center is upside the bounds.\r\n                        if (squareBounds.minY - circleCenterY < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(0, -1);\r\n                        }\r\n                    }\r\n                } else if (circleCenterY > squareBounds.minY && circleCenterY < squareBounds.maxY) {\r\n                    if (circleCenterX > squareBounds.maxX) {\r\n                        //The center is right of the bounds.\r\n                        if (circleCenterX - squareBounds.maxX < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(1, 0);\r\n                        }\r\n                    } else if (circleCenterX < squareBounds.minX) {\r\n                        //The center is left of the bounds.\r\n                        if (squareBounds.minX - circleCenterX < circleRadius) {\r\n                            result.collided = true;\r\n                            result.normal = new Vector(-1, 0);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //Detect if any point of square is inside the circle.\r\n                    let points = targetSquare.points;\r\n                    let pointCount = points.length;\r\n                    let pointHelper:Vector = new Vector();\r\n                    let circleRadiusSquare:number = circleRadius * circleRadius;\r\n                    for (let i = 0; i < pointCount; ++i) {\r\n                        Vector.subVectors(circleCenter, points[i], pointHelper);\r\n                        if (pointHelper.manitudeSquare() < circleRadiusSquare) {\r\n                            //The point is inside the circle.\r\n                            result.collided = true;\r\n                            Vector.normalVector(pointHelper, result.normal);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (target instanceof IRTriangle) {\r\n            let myCircle = this;\r\n            let targetTriangle = target as IRTriangle;\r\n            if (myCircle.bounds.intersect(targetTriangle.bounds)) {\r\n                let circleCenter = myCircle.pos;\r\n                let circleCenterPos = [circleCenter.x, circleCenter.y];\r\n                let circleRadius = myCircle.radius;\r\n                let triangleBounds = targetTriangle.bounds;\r\n                let triangleBoundsMin = [triangleBounds.minX, triangleBounds.minY];\r\n                let triangleBoundsMax = [triangleBounds.maxX, triangleBounds.maxY];\r\n                //00 is left 01 is midle 10 is right\r\n                //First two bit is x and second two bit is y.\r\n                let circlArea = 0;\r\n                if (circleCenterPos[0] > triangleBoundsMin[0] && circleCenterPos[0] < triangleBoundsMax[0]) {\r\n                    circlArea |= 1;\r\n                } else if (circleCenterPos[0] > triangleBoundsMax[0]) {\r\n                    circlArea |= 2;\r\n                }\r\n                if (circleCenterPos[1] > triangleBoundsMin[1] && circleCenterPos[1] < triangleBoundsMax[1]) {\r\n                    circlArea |= (1 << 2);\r\n                } else if (circleCenterPos[1] > triangleBoundsMax[1]) {\r\n                    circlArea |= (2 << 2);\r\n                }\r\n                //rectangle 9 area.\r\n                let findArea = false;\r\n                for (let areaX = 0; areaX < 3; ++areaX) {\r\n                    for (let areaY = 0; areaY < 3; ++areaY) {\r\n                        if (((circlArea & 3) ^ areaX) == 0 && ((circlArea >> 2) ^ areaY) == 0) {\r\n                            findArea = true;\r\n                            let sameXDirect = areaX != 1 && (areaX >> 1) == (targetTriangle.direct & 1);\r\n                            let sameYDirect = areaY != 1 && (areaY >> 1) == ((targetTriangle.direct >> 1) & 1);\r\n                            if (sameXDirect || sameYDirect) {\r\n                                if (areaX != 1 && areaY != 1) {\r\n                                    //The circle is corner of the square.\r\n                                    //Detect if any point of square is inside the circle.\r\n                                    let points = targetTriangle.points;\r\n                                    let point = points[((areaY >> 1) << 1) | (areaX >> 1)];\r\n                                    let pointHelper = new Vector();\r\n                                    let circleRadiusSquare:number = circleRadius * circleRadius;\r\n                                    Vector.subVectors(circleCenter, point, pointHelper);\r\n                                    if (pointHelper.manitudeSquare() < circleRadiusSquare) {\r\n                                        //The point is inside the circle.\r\n                                        result.collided = true;\r\n                                        Vector.normalVector(pointHelper, result.normal);\r\n                                    }  \r\n                                } else {\r\n                                    let points = targetTriangle.points;\r\n                                    //Right angle point.\r\n                                    let point = points[targetTriangle.direct];\r\n                                    if (areaX != 1) {\r\n                                        if (Math.abs(point.x - circleCenterPos[0]) < circleRadius) {\r\n                                            result.collided = true;\r\n                                            result.normal = new Vector(areaX - 1, 0);\r\n                                        }\r\n                                    } else {\r\n                                        if (Math.abs(point.y - circleCenterPos[1]) < circleRadius) {\r\n                                            result.collided = true;\r\n                                            result.normal = new Vector(0, areaY - 1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                let vectorTriangleToCenter = Vector.subVectors(myCircle.pos, targetTriangle.pos);\r\n                                let points = targetTriangle.points;\r\n                                    //Right angle point.\r\n                                let point = points[targetTriangle.direct];\r\n                                let normal = Vector.subVectors(targetTriangle.pos, point);\r\n                                normal.normal();\r\n                                let dot = Vector.dotVectors(vectorTriangleToCenter, normal);\r\n                                let circleRadius = myCircle.radius;\r\n                                if (dot < circleRadius) {\r\n                                    result.collided = true;\r\n                                    result.normal = normal;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (findArea) break;\r\n                }\r\n            }\r\n            \r\n\r\n        } else {\r\n            throw new Error(\"Invalid shape for collision detection.\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"],"sourceRoot":""}